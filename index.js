// solutions here

/**
 * 1. Asynchronous Operations
 * Create a function doAsync which accepts an array arr as input.
 * Each element in the array can be either of type String or [String].
 */

const asyncMock = require("./mock/async-operation-mock");

const { doAsync } = require("./src/do-async");

doAsync(asyncMock);

/**
 * 2. Streams
 * Create a class RandStringSource which accepts an instance of the class RandStream as input.
 * RandStringSource should be a subclass of events.EventEmitter.
 * Given the stream of random characters generated by RandStream,
 * RandStringSource should emit an event data whenever a string enclosed by . is detected.
 * The enclosed string should be used as payload in the data event.
 */

// const doStream = require("./src/do-stream");

// console.log(doStream);

/**
 * 3.Resource Pooling
 * Create a class ResourceManager which accepts an integer count as input.
 * ResourceManager should manage a limited number of resource objects.
 * The maximum number of resource objects that can be created is determined by count.
 * ResourceManager should implement a function borrow which accepts a callback as parameter.
 * The borrow function should reserve a resource object and pass it to the caller through the callback.
 * A resource object can never be acquired by other borrowers until the release function in
 * the resource object is called.
 */
const doPooling = require("./src/do-pooling");

doPooling();
